%define api.pure
%locations
%defines
%define parse.lac full
%define parse.error verbose
%parse-param {void *v}
%lex-param {void *scanner}

%{

#define YYDEBUG 1

#include <stdio.h>
#include <string.h>
#include <math.h>

#include <tranalisi.hpp>

#include "fitter/node.hpp"
#include "fitter/operations.hpp"
#include "fitter/fitter_parser.hpp"

  const int debug_parser=0;

  int fitter_tokenizer_lex(YYSTYPE *lvalp,YYLTYPE *llocp,void *scanner);
#define fitter_parser_lex fitter_tokenizer_lex

/// opaque flex object
extern void *scanner;
  
  void fitter_parser_error(YYLTYPE *locp,void *v,const char *err)
  {
      CRASH("exception at line %d columns [%d-%d] %s",locp->first_line,locp->first_column,locp->last_column,err);
  }
  
%}

/// union used to catch all symbols
%union
{
    node_t* node;
    int int_val;
    double real_val;
}

%token <real_val> TK_REAL_VAL
%token <int_val> TK_INT_VAL

%token TK_SIN
%token TK_COS
%token TK_TAN
%token TK_SINH
%token TK_COSH
%token TK_TANH
%token TK_ASIN
%token TK_ACOS
%token TK_ATAN
%token TK_ASINH
%token TK_ACOSH
%token TK_ATANH
%token TK_EXP
%token TK_LOG
%token TK_SQRT



%token TK_INVALID_CHAR

%type <node> node_rule real_rule parameter_rule

%left '-' '+'
%left '*' '/'
%precedence NEG
%right '^'

%%

formula: node_rule {cout<<"Eval: "<<$1->eval()<<endl;delete $1;}
       ;

node_rule: real_rule
 	 | parameter_rule
         | node_rule '+' node_rule {$$=new bexp_node_t(sum,$1,$3);}
         | node_rule '-' node_rule {$$=new bexp_node_t(difference,$1,$3);}
         | node_rule '*' node_rule {$$=new bexp_node_t(product,$1,$3);}
         | node_rule '/' node_rule {$$=new bexp_node_t(division,$1,$3);}
         | '-' node_rule  %prec NEG {$$=new uexp_node_t(uminus,$2);}
         | '+' node_rule  %prec NEG {$$=$2;}
         | node_rule '^' node_rule {$$=new bexp_node_t(pow,$1,$3);}
         | TK_SIN '(' node_rule ')' {$$=new uexp_node_t(sin,$3);}
         | TK_COS '(' node_rule ')' {$$=new uexp_node_t(cos,$3);}
         | TK_TAN '(' node_rule ')' {$$=new uexp_node_t(tan,$3);}
         | TK_SINH '(' node_rule ')' {$$=new uexp_node_t(sinh,$3);}
         | TK_COSH '(' node_rule ')' {$$=new uexp_node_t(cosh,$3);}
         | TK_TANH '(' node_rule ')' {$$=new uexp_node_t(tanh,$3);}
         | TK_ASIN '(' node_rule ')' {$$=new uexp_node_t(asin,$3);}
         | TK_ACOS '(' node_rule ')' {$$=new uexp_node_t(acos,$3);}
         | TK_ATAN '(' node_rule ')' {$$=new uexp_node_t(atan,$3);}
         | TK_ASINH '(' node_rule ')' {$$=new uexp_node_t(asinh,$3);}
         | TK_ACOSH '(' node_rule ')' {$$=new uexp_node_t(acosh,$3);}
         | TK_ATANH '(' node_rule ')' {$$=new uexp_node_t(atanh,$3);}
         | TK_EXP '(' node_rule ')' {$$=new uexp_node_t(exp,$3);}
         | TK_LOG '(' node_rule ')' {$$=new uexp_node_t(log,$3);}
         | TK_SQRT '(' node_rule ')' {$$=new uexp_node_t(sqrt,$3);}
	 | '(' node_rule ')' {$$=$2;}
	 ;

parameter_rule: '[' TK_INT_VAL ']' {$$=new parameter_node_t($2);if((int)pars.size()<$2+1) pars.resize($2+1);}
	;

real_rule: TK_REAL_VAL {$$=new real_node_t($1);}
         | TK_INT_VAL {$$=new real_node_t($1);}
         ;

